{"version":3,"sources":["./src/app/shared/global-constants.ts","./src/app/home/home.component.ts","./src/app/home/home.component.html","./src/environments/environment.ts","./src/app/shared/accordion/accordion.directive.ts","./src/app/shared/accordion/accordionlink.directive.ts","./src/app/shared/menu-items.ts","./src/app/material-component/dialog/change-password/change-password.component.ts","./src/app/material-component/dialog/change-password/change-password.component.html","./src/app/shared/accordion/index.ts","./src/app/layouts/full/sidebar/sidebar.component.ts","./src/app/layouts/full/sidebar/sidebar.component.html","./src/app/shared/shared.module.ts","./src/app/layouts/full/full.component.ts","./src/app/layouts/full/full.component.html","./src/app/app.component.ts","./src/app/app.component.html","./src/app/material-component/dialog/confirmation/confirmation.component.ts","./src/app/material-component/dialog/confirmation/confirmation.component.html","./src/app/forgot-password/forgot-password.component.ts","./src/app/forgot-password/forgot-password.component.html","./src/app/app.module.ts","./src/app/services/auth.service.ts","./src/app/services/route-guard.service.ts","./src/app/services/snackbar.service.ts","./src/app/shared/material-module.ts","./src/app/services/user.service.ts","./src/app/signup/signup.component.ts","./src/app/signup/signup.component.html","./src/app/app-routing.module.ts","./src/app/login/login.component.ts","./src/app/login/login.component.html","./src/app/layouts/full/header/header.component.ts","./src/app/layouts/full/header/header.component.html","./src/app/shared/accordion/accordionanchor.directive.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object","./src/app/services/token-interceptor.interceptor.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["export class GlobalConstants {\r\n  //message\r\n  public static genericError: string =\r\n    'Something went wrong. Please try again later';\r\n\r\n  public static unauthorized: string =\r\n    'You are not an authorized person to access this page';\r\n\r\n  public static productExistError: string = 'Product already exists';\r\n\r\n  public static productAdded: string = 'Product Added Successfully';\r\n\r\n  //regex\r\n  public static nameRegex: string = '[a-zA-Z0-9 ]*';\r\n\r\n  public static emailRegex: string =\r\n    '[A-Za-z0-9._%-]+@[A-Za-z0-9._%-]+\\\\.[a-z]{2,3}';\r\n\r\n  public static contactNumberRegex: string = '^[e0-9]{10,10}$';\r\n\r\n  //variable\r\n  public static error: string = 'error';\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { MatDialog, MatDialogConfig } from '@angular/material/dialog';\r\nimport { SignupComponent } from '../signup/signup.component';\r\nimport { ForgotPasswordComponent } from '../forgot-password/forgot-password.component';\r\nimport { LoginComponent } from '../login/login.component';\r\nimport { Router } from '@angular/router';\r\nimport { UserService } from '../services/user.service';\r\n\r\n@Component({\r\n  selector: 'app-home',\r\n  templateUrl: './home.component.html',\r\n  styleUrls: ['./home.component.scss'],\r\n})\r\nexport class HomeComponent implements OnInit {\r\n  constructor(\r\n    private dialog: MatDialog,\r\n    private router: Router,\r\n    private userService: UserService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    if (localStorage.getItem('token') != null) {\r\n      this.userService.checkToken().subscribe(\r\n        (response: any) => {\r\n          this.router.navigate(['/cafeteria/dashboard']);\r\n        },\r\n        (error: any) => {\r\n          console.log(error);\r\n        }\r\n      );\r\n    }\r\n  }\r\n\r\n  signupAction() {\r\n    const dialogConfig = new MatDialogConfig();\r\n    dialogConfig.width = '550px';\r\n    this.dialog.open(SignupComponent, dialogConfig);\r\n  }\r\n\r\n  forgotPasswordAction() {\r\n    const dialogConfig = new MatDialogConfig();\r\n    dialogConfig.width = '550px';\r\n    this.dialog.open(ForgotPasswordComponent, dialogConfig);\r\n  }\r\n\r\n  loginAction() {\r\n    const dialogConfig = new MatDialogConfig();\r\n    dialogConfig.width = '550px';\r\n    this.dialog.open(LoginComponent, dialogConfig);\r\n  }\r\n}\r\n","<div class=\"bg-image\"></div>\r\n\r\n<div class=\"wrapper sticky\">\r\n  <nav class=\"navbar-fixed-top\">\r\n    <a href=\"#\" class=\"logo\">\r\n      <mat-icon>storefront</mat-icon> Cafeteria Management System\r\n    </a>\r\n    <ul>\r\n      <li><a (click)=\"loginAction()\">Login</a></li>\r\n      <li><a (click)=\"signupAction()\">Signup</a></li>\r\n      <li><a (click)=\"forgotPasswordAction()\">Forgot Password?</a></li>\r\n    </ul>\r\n  </nav>\r\n</div>","export const environment = {\r\n  production: false,\r\n  apiUrl: 'http://localhost:8080',\r\n};\r\n","import {\r\n  Directive,\r\n  OnInit,\r\n  AfterViewInit,\r\n  AfterContentChecked\r\n} from '@angular/core';\r\nimport { Router, NavigationEnd } from '@angular/router';\r\n\r\nimport { AccordionLinkDirective } from './accordionlink.directive';\r\nimport { filter } from 'rxjs/operators';\r\n\r\n@Directive({\r\n  selector: '[appAccordion]'\r\n})\r\nexport class AccordionDirective implements AfterContentChecked {\r\n  protected navlinks: Array<AccordionLinkDirective> = [];\r\n\r\n  closeOtherLinks(selectedLink: AccordionLinkDirective): void {\r\n    this.navlinks.forEach((link: AccordionLinkDirective) => {\r\n      if (link !== selectedLink) {\r\n        link.selected = false;\r\n      }\r\n    });\r\n  }\r\n\r\n  addLink(link: AccordionLinkDirective): void {\r\n    this.navlinks.push(link);\r\n  }\r\n\r\n  removeGroup(link: AccordionLinkDirective): void {\r\n    const index = this.navlinks.indexOf(link);\r\n    if (index !== -1) {\r\n      this.navlinks.splice(index, 1);\r\n    }\r\n  }\r\n\r\n  checkOpenLinks() {\r\n    this.navlinks.forEach((link: AccordionLinkDirective) => {\r\n      if (link.group) {\r\n        const routeUrl = this.router.url;\r\n        const currentUrl = routeUrl.split('/');\r\n        if (currentUrl.indexOf(link.group) > 0) {\r\n          link.selected = true;\r\n          this.closeOtherLinks(link);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  ngAfterContentChecked(): void {\r\n    this.router.events\r\n      .pipe(filter(event => event instanceof NavigationEnd))\r\n      .subscribe(e => this.checkOpenLinks());\r\n  }\r\n\r\n  constructor(private router: Router) {\r\n    setTimeout(() => this.checkOpenLinks());\r\n  }\r\n}\r\n","import {\r\n  Directive,\r\n  HostBinding,\r\n  Inject,\r\n  Input,\r\n  OnInit,\r\n  OnDestroy\r\n} from '@angular/core';\r\n\r\nimport { AccordionDirective } from './accordion.directive';\r\n\r\n@Directive({\r\n  selector: '[appAccordionLink]'\r\n})\r\nexport class AccordionLinkDirective implements OnInit, OnDestroy {\r\n  @Input()\r\n  public group: any;\r\n\r\n  @HostBinding('class.selected')\r\n  @Input()\r\n  get selected(): boolean {\r\n    return this._selected;\r\n  }\r\n\r\n  set selected(value: boolean) {\r\n    this._selected = value;\r\n    if (value) {\r\n      this.nav.closeOtherLinks(this);\r\n    }\r\n  }\r\n\r\n  protected _selected: boolean=false;\r\n  protected nav: AccordionDirective;\r\n\r\n  constructor(@Inject(AccordionDirective) nav: AccordionDirective) {\r\n    this.nav = nav;\r\n  }\r\n\r\n  ngOnInit(): any {\r\n    this.nav.addLink(this);\r\n  }\r\n\r\n  ngOnDestroy(): any {\r\n    this.nav.removeGroup(this);\r\n  }\r\n\r\n  toggle(): any {\r\n    this.selected = !this.selected;\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nexport interface Menu {\r\n  state: string;\r\n  name: string;\r\n  icon: string;\r\n  role: string;\r\n}\r\n\r\nconst MENUITEMS = [\r\n  { state: 'dashboard', name: 'Dashboard', icon: 'dashboard', role: '' },\r\n  {\r\n    state: 'category',\r\n    name: 'Manage Category',\r\n    icon: 'category',\r\n    role: 'admin',\r\n  },\r\n  {\r\n    state: 'product',\r\n    name: 'Manage Product',\r\n    icon: 'inventory_2',\r\n    role: 'admin',\r\n  },\r\n  {\r\n    state: 'order',\r\n    name: 'Manage Order',\r\n    icon: 'list_alt',\r\n    role: '',\r\n  },\r\n  {\r\n    state: 'bill',\r\n    name: 'View Bill',\r\n    icon: 'import_contacts',\r\n    role: '',\r\n  },\r\n  {\r\n    state: 'user',\r\n    name: 'View User',\r\n    icon: 'people',\r\n    role: 'admin',\r\n  },\r\n];\r\n\r\n@Injectable()\r\nexport class MenuItems {\r\n  getMenuItem(): Menu[] {\r\n    return MENUITEMS;\r\n  }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\nimport { NgxUiLoaderService } from 'ngx-ui-loader';\r\nimport { SnackbarService } from 'src/app/services/snackbar.service';\r\nimport { UserService } from 'src/app/services/user.service';\r\nimport { GlobalConstants } from 'src/app/shared/global-constants';\r\n\r\n@Component({\r\n  selector: 'app-change-password',\r\n  templateUrl: './change-password.component.html',\r\n  styleUrls: ['./change-password.component.scss'],\r\n})\r\nexport class ChangePasswordComponent implements OnInit {\r\n  changePasswordForm: any = FormGroup;\r\n  responseMessage: any;\r\n\r\n  constructor(\r\n    private formBuilder: FormBuilder,\r\n    private userService: UserService,\r\n    public dialogRef: MatDialogRef<ChangePasswordComponent>,\r\n    private ngxService: NgxUiLoaderService,\r\n    private snackbarService: SnackbarService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.changePasswordForm = this.formBuilder.group({\r\n      oldPassword: [null, [Validators.required]],\r\n      newPassword: [null, [Validators.required]],\r\n      confirmPassword: [null, [Validators.required]],\r\n    });\r\n  }\r\n\r\n  validateSubmit() {\r\n    if (\r\n      this.changePasswordForm.controls['newPassword'].value !=\r\n      this.changePasswordForm.controls['confirmPassword'].value\r\n    ) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  handleChangePasswordSubmit() {\r\n    this.ngxService.start();\r\n    var formData = this.changePasswordForm.value;\r\n    var data = {\r\n      oldPassword: formData.oldPassword,\r\n      newPassword: formData.newPassword,\r\n      confirmPassword: formData.confirmPassword,\r\n    };\r\n    this.userService.changePassword(data).subscribe(\r\n      (response: any) => {\r\n        this.ngxService.stop();\r\n        this.responseMessage = response?.message;\r\n        this.dialogRef.close();\r\n        this.snackbarService.openSnackBar(this.responseMessage, 'success');\r\n      },\r\n      (error) => {\r\n        this.ngxService.stop();\r\n        console.log(error);\r\n        if (error.error?.message) {\r\n          this.responseMessage = error.error?.message;\r\n        } else {\r\n          this.responseMessage = GlobalConstants.genericError;\r\n        }\r\n        this.snackbarService.openSnackBar(\r\n          this.responseMessage,\r\n          GlobalConstants.error\r\n        );\r\n      }\r\n    );\r\n  }\r\n}\r\n","<mat-toolbar color=\"primary\">\r\n    <mat-toolbar-row fxLayout=\"row\">\r\n        <span class=\"title-center\">Change Password</span>\r\n    </mat-toolbar-row>\r\n</mat-toolbar>\r\n\r\n<mat-dialog-content>\r\n    <form [formGroup]=\"changePasswordForm\">\r\n        <div fxFlex fxLayout=\"column\">\r\n\r\n            <mat-form-field appearance=\"fill\" fxFlex>\r\n                <mat-label>Old Password</mat-label>\r\n                <input matInput formControlName=\"oldPassword\" type=\"password\" required>\r\n                <mat-error\r\n                    *ngIf=\"changePasswordForm.controls.oldPassword.touched && changePasswordForm.controls.oldPassword.invalid\">\r\n                    <span *ngIf=\"changePasswordForm.controls.oldPassword.error.required\">This field is mandatory.</span>\r\n                </mat-error>\r\n            </mat-form-field>\r\n\r\n            <mat-form-field appearance=\"fill\" fxFlex>\r\n                <mat-label>New Password</mat-label>\r\n                <input matInput formControlName=\"newPassword\" type=\"password\" required>\r\n                <mat-error\r\n                    *ngIf=\"changePasswordForm.controls.newPassword.touched && changePasswordForm.controls.newPassword.invalid\">\r\n                    <span *ngIf=\"changePasswordForm.controls.newPassword.error.required\">This field is mandatory.</span>\r\n                </mat-error>\r\n            </mat-form-field>\r\n\r\n            <mat-form-field appearance=\"fill\" fxFlex>\r\n                <mat-label>Confirm Password</mat-label>\r\n                <input matInput formControlName=\"confirmPassword\" type=\"password\" required>\r\n                <mat-error\r\n                    *ngIf=\"changePasswordForm.controls.confirmPassword.touched && changePasswordForm.controls.confirmPassword.invalid\">\r\n                    <span *ngIf=\"changePasswordForm.controls.confirmPassword.error.required\">This field is\r\n                        mandatory.</span>\r\n                </mat-error>\r\n                <mat-hint *ngIf=\"validateSubmit() && !(changePasswordForm.controls.confirmPassword.invalid)\">\r\n                    <span>Confirm Password doesn't match with New Password</span>\r\n                </mat-hint>\r\n            </mat-form-field>\r\n        </div>\r\n    </form>\r\n</mat-dialog-content>\r\n\r\n<mat-dialog-actions align=\"center\">\r\n    <button mat-raised-button color=\"primary\" type=\"submit\" (click)=\"handleChangePasswordSubmit()\"\r\n        [disabled]=\"validateSubmit() || !(changePasswordForm.valid && changePasswordForm.dirty)\">Change</button>\r\n    <button mat-raised-button color=\"primary\" mat-dialog-close>Close</button>\r\n</mat-dialog-actions>","export * from './accordionanchor.directive';\r\nexport * from './accordionlink.directive';\r\nexport * from './accordion.directive';\r\n","import { ChangeDetectorRef, Component, OnDestroy } from '@angular/core';\r\nimport { MediaMatcher } from '@angular/cdk/layout';\r\nimport jwt_decode from 'jwt-decode';\r\nimport { MenuItems } from 'src/app/shared/menu-items';\r\n\r\n@Component({\r\n  selector: 'app-sidebar',\r\n  templateUrl: './sidebar.component.html',\r\n  styleUrls: [],\r\n})\r\nexport class AppSidebarComponent implements OnDestroy {\r\n  mobileQuery: MediaQueryList;\r\n  token: any = localStorage.getItem('token');\r\n  tokenPayload: any;\r\n\r\n  private _mobileQueryListener: () => void;\r\n\r\n  constructor(\r\n    changeDetectorRef: ChangeDetectorRef,\r\n    media: MediaMatcher,\r\n    public menuItems: MenuItems\r\n  ) {\r\n    this.tokenPayload = jwt_decode(this.token);\r\n    this.mobileQuery = media.matchMedia('(min-width: 768px)');\r\n    this._mobileQueryListener = () => changeDetectorRef.detectChanges();\r\n    this.mobileQuery.addListener(this._mobileQueryListener);\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.mobileQuery.removeListener(this._mobileQueryListener);\r\n  }\r\n}\r\n","<mat-nav-list appAccordion>\r\n    <mat-list-item appAccordionLink *ngFor=\"let menuItem of menuItems.getMenuItem()\" routerLinkActive=\"selected\"\r\n        group=\"{{menuItem.state}}\">\r\n        <a appAccordionToggle [routerLink]=\"['/cafeteria', menuItem.state]\"\r\n            *ngIf=\"(menuItem.role === '' || menuItem.role ===tokenPayload.role)\">\r\n            <mat-icon>{{menuItem.icon}}</mat-icon>\r\n            <span>{{menuItem.name}}</span>\r\n            <span fxFlex></span>\r\n        </a>\r\n    </mat-list-item>\r\n</mat-nav-list>","import { NgModule } from '@angular/core';\r\n\r\nimport {\r\n  AccordionAnchorDirective,\r\n  AccordionLinkDirective,\r\n  AccordionDirective,\r\n} from './accordion';\r\nimport { MenuItems } from './menu-items';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AccordionAnchorDirective,\r\n    AccordionLinkDirective,\r\n    AccordionDirective,\r\n  ],\r\n  exports: [\r\n    AccordionAnchorDirective,\r\n    AccordionLinkDirective,\r\n    AccordionDirective,\r\n  ],\r\n  providers: [MenuItems],\r\n})\r\nexport class SharedModule {}\r\n","import { MediaMatcher } from '@angular/cdk/layout';\r\nimport { ChangeDetectorRef, Component, OnDestroy, AfterViewInit } from '@angular/core';\r\n\r\n\r\n/** @title Responsive sidenav */\r\n@Component({\r\n  selector: 'app-full-layout',\r\n  templateUrl: 'full.component.html',\r\n  styleUrls: []\r\n})\r\nexport class FullComponent implements OnDestroy, AfterViewInit {\r\n  mobileQuery: MediaQueryList;\r\n\r\n  private _mobileQueryListener: () => void;\r\n\r\n  constructor(\r\n    changeDetectorRef: ChangeDetectorRef,\r\n    media: MediaMatcher\r\n  ) {\r\n    this.mobileQuery = media.matchMedia('(min-width: 768px)');\r\n    this._mobileQueryListener = () => changeDetectorRef.detectChanges();\r\n    this.mobileQuery.addListener(this._mobileQueryListener);\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.mobileQuery.removeListener(this._mobileQueryListener);\r\n  }\r\n  ngAfterViewInit() { }\r\n}\r\n","<div class=\"main-container\">\r\n    <mat-toolbar color=\"primary\" class=\"topbar telative\">\r\n        <div class=\"navbar-header\">\r\n            <button mat-icon-button (click)=\"snav.toggle()\" value=\"sidebarclosed\" style=\"vertical-align: bottom;\">\r\n                <mat-icon>menu</mat-icon>\r\n            </button><b>\r\n                <span style=\"vertical-align: middle;\">\r\n                    <mat-icon>storefront</mat-icon>\r\n                </span>\r\n            </b>\r\n            <span fxShow=\"false\" fxShow.gt-xs>\r\n                Cafe Management System\r\n            </span>\r\n        </div>\r\n        <span fxFlex></span>\r\n        <app-header></app-header>\r\n    </mat-toolbar>\r\n    <mat-sidenav-container class=\"example-sidenav-container\" [style.marginTop.px]=\"mobileQuery.matches ? 0 : 0\">\r\n        <mat-sidenav #snav id=\"snav\" class=\"dark-sidebar pl-xs\" [mode]=\"mobileQuery.matches ? 'side' : 'over'\"\r\n            fixedTopGap=\"0\" [opened]=\"mobileQuery.matches\" [disableClose]=\"mobileQuery.matches\">\r\n            <app-sidebar></app-sidebar>\r\n        </mat-sidenav>\r\n        <mat-sidenav-content class=\"page-wrapper\">\r\n            <div class=\"page-content\">\r\n                <router-outlet></router-outlet>\r\n            </div>\r\n        </mat-sidenav-content>\r\n    </mat-sidenav-container>\r\n</div>","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss'],\r\n})\r\nexport class AppComponent {\r\n  title = 'Frontend';\r\n}\r\n","<router-outlet></router-outlet>\r\n<ngx-ui-loader></ngx-ui-loader>","import { Component, EventEmitter, Inject, OnInit } from '@angular/core';\r\nimport { MAT_DIALOG_DATA } from '@angular/material/dialog';\r\n\r\n@Component({\r\n  selector: 'app-confirmation',\r\n  templateUrl: './confirmation.component.html',\r\n  styleUrls: ['./confirmation.component.scss'],\r\n})\r\nexport class ConfirmationComponent implements OnInit {\r\n  onEmitStatusChange = new EventEmitter();\r\n  details: any = {};\r\n\r\n  constructor(@Inject(MAT_DIALOG_DATA) public dialogData: any) {}\r\n\r\n  ngOnInit(): void {\r\n    if (this.dialogData) {\r\n      this.details = this.dialogData;\r\n    }\r\n  }\r\n\r\n  handleChangeAction() {\r\n    this.onEmitStatusChange.emit();\r\n  }\r\n}\r\n","<mat-dialog-content class=\"mat-typography\">\r\n    <h5>Are you sure to {{details.message}} ?</h5>\r\n</mat-dialog-content>\r\n<mat-dialog-actions align=\"end\">\r\n    <button mat-raised-button color=\"primary\" (click)=\"handleChangeAction()\">Yes</button>\r\n    <button mat-raised-button mat-dialog-close>No</button>\r\n</mat-dialog-actions>","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { UserService } from '../services/user.service';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\nimport { SnackbarService } from '../services/snackbar.service';\r\nimport { GlobalConstants } from '../shared/global-constants';\r\nimport { NgxUiLoaderService } from 'ngx-ui-loader';\r\n\r\n@Component({\r\n  selector: 'app-forgot-password',\r\n  templateUrl: './forgot-password.component.html',\r\n  styleUrls: ['./forgot-password.component.scss'],\r\n})\r\nexport class ForgotPasswordComponent implements OnInit {\r\n  forgotPasswordForm: any = FormGroup;\r\n  responseMessage: any;\r\n\r\n  constructor(\r\n    private formBuilder: FormBuilder,\r\n    private userService: UserService,\r\n    private dialogRef: MatDialogRef<ForgotPasswordComponent>,\r\n    private snackbarService: SnackbarService,\r\n    private ngxService: NgxUiLoaderService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.forgotPasswordForm = this.formBuilder.group({\r\n      email: [\r\n        null,\r\n        [Validators.required, Validators.pattern(GlobalConstants.emailRegex)],\r\n      ],\r\n    });\r\n  }\r\n\r\n  handleSubmit() {\r\n    this.ngxService.start();\r\n    var formData = this.forgotPasswordForm.value;\r\n    var data = {\r\n      email: formData.email,\r\n    };\r\n    this.userService.forgotPassword(data).subscribe(\r\n      (response: any) => {\r\n        this.ngxService.stop();\r\n        this.responseMessage = response?.message;\r\n        this.dialogRef.close();\r\n        this.snackbarService.openSnackBar(this.responseMessage, '');\r\n      },\r\n      (error) => {\r\n        this.ngxService.stop();\r\n        if (error.error?.message) {\r\n          this.responseMessage = error.error?.message;\r\n        } else {\r\n          this.responseMessage = GlobalConstants.genericError;\r\n        }\r\n        this.snackbarService.openSnackBar(\r\n          this.responseMessage,\r\n          GlobalConstants.error\r\n        );\r\n      }\r\n    );\r\n  }\r\n}\r\n","<mat-toolbar color=\"primary\">\r\n    <mat-toolbar-row fxLayout=\"row\">\r\n        <span class=\"title-center\">Forgot Password?</span>\r\n    </mat-toolbar-row>\r\n</mat-toolbar>\r\n<mat-dialog-content class=\"mat-typography\">\r\n    <form [formGroup]=\"forgotPasswordForm\">\r\n        <div fxFlex fxLayout=\"column\">\r\n            <mat-form-field appearance=\"fill\" fxFlex>\r\n                <mat-label>Email</mat-label>\r\n                <input matInput formControlName=\"email\" required>\r\n                <mat-error\r\n                    *ngIf=\"forgotPasswordForm.controls.email.touched && forgotPasswordForm.controls.email.invalid\">\r\n                    <span *ngIf=\"forgotPasswordForm.controls.email.errors.required\">This field is mandatory.</span>\r\n                    <span *ngIf=\"forgotPasswordForm.controls.email.errors.pattern\">This field is invalid.</span>\r\n                </mat-error>\r\n            </mat-form-field>\r\n        </div>\r\n    </form>\r\n</mat-dialog-content>\r\n\r\n<mat-dialog-actions align=\"center\">\r\n    <button mat-raised-button color=\"primary\" type=\"submit\" (click)=\"handleSubmit()\"\r\n        [disabled]=\"!(forgotPasswordForm.valid && forgotPasswordForm.dirty)\">Send Password</button>\r\n    <button mat-raised-button color=\"primary\" mat-dialog-close>Close</button>\r\n</mat-dialog-actions>","import { NgModule } from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { MaterialModule } from './shared/material-module';\r\nimport { HomeComponent } from './home/home.component';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { FlexLayoutModule } from '@angular/flex-layout';\r\nimport { SharedModule } from './shared/shared.module';\r\nimport { FullComponent } from './layouts/full/full.component';\r\nimport { AppHeaderComponent } from './layouts/full/header/header.component';\r\nimport { AppSidebarComponent } from './layouts/full/sidebar/sidebar.component';\r\nimport { HTTP_INTERCEPTORS, HttpClientModule } from '@angular/common/http';\r\nimport { SignupComponent } from './signup/signup.component';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\nimport { ForgotPasswordComponent } from './forgot-password/forgot-password.component';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { TokenInterceptorInterceptor } from './services/token-interceptor.interceptor';\r\nimport {\r\n  NgxUiLoaderModule,\r\n  SPINNER,\r\n  PB_DIRECTION,\r\n  NgxUiLoaderConfig,\r\n} from 'ngx-ui-loader';\r\n\r\nconst ngxUiLoaderConfig: NgxUiLoaderConfig = {\r\n  text: 'Loading...',\r\n  textPosition: 'center-center',\r\n  pbColor: 'red',\r\n  bgsColor: 'red',\r\n  fgsColor: 'red',\r\n  fgsType: SPINNER.ballSpinClockwise,\r\n  fgsSize: 100,\r\n  pbDirection: PB_DIRECTION.leftToRight,\r\n  pbThickness: 5,\r\n};\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    HomeComponent,\r\n    FullComponent,\r\n    AppHeaderComponent,\r\n    AppSidebarComponent,\r\n    SignupComponent,\r\n    ForgotPasswordComponent,\r\n    LoginComponent,\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule,\r\n    BrowserAnimationsModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    MaterialModule,\r\n    FlexLayoutModule,\r\n    SharedModule,\r\n    HttpClientModule,\r\n    MatProgressSpinnerModule,\r\n    NgxUiLoaderModule.forRoot(ngxUiLoaderConfig),\r\n  ],\r\n  providers: [\r\n    HttpClientModule,\r\n    {\r\n      provide: HTTP_INTERCEPTORS,\r\n      useClass: TokenInterceptorInterceptor,\r\n      multi: true,\r\n    },\r\n  ],\r\n  bootstrap: [AppComponent],\r\n})\r\nexport class AppModule {}\r\n","import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AuthService {\r\n  constructor(private router: Router) {}\r\n\r\n  public isAuthenticated(): boolean {\r\n    const token = localStorage.getItem('token');\r\n    if (!token) {\r\n      this.router.navigate(['/']);\r\n      return false;\r\n    } else {\r\n      return true;\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { AuthService } from './auth.service';\r\nimport { ActivatedRouteSnapshot, Router } from '@angular/router';\r\nimport { SnackbarService } from './snackbar.service';\r\nimport jwt_decode from 'jwt-decode';\r\nimport { GlobalConstants } from '../shared/global-constants';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class RouteGuardService {\r\n  constructor(\r\n    public auth: AuthService,\r\n    public router: Router,\r\n    private snackbarService: SnackbarService\r\n  ) {}\r\n\r\n  canActivate(route: ActivatedRouteSnapshot): boolean {\r\n    let expectedRolearray = route.data;\r\n    expectedRolearray = expectedRolearray.expectedRole;\r\n\r\n    const token: any = localStorage.getItem('token');\r\n    var tokenPayload: any;\r\n    try {\r\n      tokenPayload = jwt_decode(token);\r\n    } catch (err) {\r\n      localStorage.clear();\r\n      this.router.navigate(['/']);\r\n    }\r\n\r\n    let checkRole = false;\r\n\r\n    for (let i = 0; i < expectedRolearray.length; i++) {\r\n      if (expectedRolearray[i] == tokenPayload.role) {\r\n        checkRole = true;\r\n      }\r\n    }\r\n\r\n    if (tokenPayload.role == 'user' || tokenPayload.role == 'admin') {\r\n      if (this.auth.isAuthenticated() && checkRole) {\r\n        return true;\r\n      }\r\n      this.snackbarService.openSnackBar(\r\n        GlobalConstants.unauthorized,\r\n        GlobalConstants.error\r\n      );\r\n      this.router.navigate(['/cafeteria/dashboard']);\r\n      return false;\r\n    } else {\r\n      this.router.navigate(['/']);\r\n      localStorage.clear();\r\n      return false;\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { MatSnackBar } from '@angular/material/snack-bar';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class SnackbarService {\r\n  constructor(private snackbar: MatSnackBar) {}\r\n\r\n  openSnackBar(message: string, action: string) {\r\n    if (action === 'error') {\r\n      this.snackbar.open(message, '', {\r\n        horizontalPosition: 'center',\r\n        verticalPosition: 'top',\r\n        duration: 2000,\r\n        panelClass: ['black-snackbar'],\r\n      });\r\n    } else {\r\n      this.snackbar.open(message, '', {\r\n        horizontalPosition: 'center',\r\n        verticalPosition: 'top',\r\n        duration: 2000,\r\n        panelClass: ['green-snackbar'],\r\n      });\r\n    }\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n import { NgModule } from '@angular/core';\r\n import { MatAutocompleteModule } from '@angular/material/autocomplete';\r\n import { MatButtonModule } from '@angular/material/button';\r\n import { MatButtonToggleModule } from '@angular/material/button-toggle';\r\n import { MatCardModule } from '@angular/material/card';\r\n import { MatCheckboxModule } from '@angular/material/checkbox';\r\n import { MatChipsModule } from '@angular/material/chips';\r\n import { MatDatepickerModule } from '@angular/material/datepicker';\r\n import { MatDialogModule } from '@angular/material/dialog';\r\n import { MatExpansionModule } from '@angular/material/expansion';\r\n import { MatFormFieldModule } from '@angular/material/form-field';\r\n import { MatGridListModule } from '@angular/material/grid-list';\r\n import { MatIconModule } from '@angular/material/icon';\r\n import { MatInputModule } from '@angular/material/input';\r\n import { MatListModule } from '@angular/material/list';\r\n import { MatMenuModule } from '@angular/material/menu';\r\n import { MatPaginatorModule } from '@angular/material/paginator';\r\n import { MatProgressBarModule } from '@angular/material/progress-bar';\r\n import { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\n import { MatRadioModule } from '@angular/material/radio';\r\n import { MatSelectModule } from '@angular/material/select';\r\n import { MatSidenavModule } from '@angular/material/sidenav';\r\n import { MatSliderModule } from '@angular/material/slider';\r\n import { MatSlideToggleModule } from '@angular/material/slide-toggle';\r\n import { MatSnackBarModule } from '@angular/material/snack-bar';\r\n import { MatSortModule } from '@angular/material/sort';\r\n import { MatTableModule } from '@angular/material/table';\r\n import { MatTabsModule } from '@angular/material/tabs';\r\n import { MatToolbarModule } from '@angular/material/toolbar';\r\n import { MatTooltipModule } from '@angular/material/tooltip';\r\n import { MatStepperModule } from '@angular/material/stepper';\r\n import { MatBadgeModule } from '@angular/material/badge';\r\n import { MatNativeDateModule, MatRippleModule } from '@angular/material/core';\r\n import { MatBottomSheetModule } from '@angular/material/bottom-sheet';\r\n \r\n import { CdkTableModule } from '@angular/cdk/table';\r\n import { CdkAccordionModule } from '@angular/cdk/accordion';\r\n import { A11yModule } from '@angular/cdk/a11y';\r\n import { BidiModule } from '@angular/cdk/bidi';\r\n import { OverlayModule } from '@angular/cdk/overlay';\r\n import { PlatformModule } from '@angular/cdk/platform';\r\n import { ObserversModule } from '@angular/cdk/observers';\r\n import { PortalModule } from '@angular/cdk/portal';\r\n \r\n /**\r\n  * NgModule that includes all Material modules that are required to serve the demo-app.\r\n  */\r\n @NgModule({\r\n     exports: [\r\n         MatAutocompleteModule,\r\n         MatButtonModule,\r\n         MatBottomSheetModule,\r\n         MatButtonToggleModule,\r\n         MatCardModule,\r\n         MatCheckboxModule,\r\n         MatChipsModule,\r\n         MatTableModule,\r\n         MatDatepickerModule,\r\n         MatDialogModule,\r\n         MatExpansionModule,\r\n         MatFormFieldModule,\r\n         MatGridListModule,\r\n         MatIconModule,\r\n         MatInputModule,\r\n         MatListModule,\r\n         MatMenuModule,\r\n         MatPaginatorModule,\r\n         MatProgressBarModule,\r\n         MatProgressSpinnerModule,\r\n         MatRadioModule,\r\n         MatRippleModule,\r\n         MatSelectModule,\r\n         MatBadgeModule,\r\n         MatSidenavModule,\r\n         MatSlideToggleModule,\r\n         MatSliderModule,\r\n         MatSnackBarModule,\r\n         MatSortModule,\r\n         MatStepperModule,\r\n         MatTabsModule,\r\n         MatToolbarModule,\r\n         MatTooltipModule,\r\n         MatNativeDateModule,\r\n         CdkTableModule,\r\n         A11yModule,\r\n         BidiModule,\r\n         CdkAccordionModule,\r\n         ObserversModule,\r\n         OverlayModule,\r\n         PlatformModule,\r\n         PortalModule\r\n     ]\r\n })\r\n export class MaterialModule { }\r\n ","import { Injectable } from '@angular/core';\r\nimport { environment } from '../../environments/environment';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class UserService {\r\n  url = environment.apiUrl;\r\n  constructor(private httpClient: HttpClient) {}\r\n\r\n  signup(data: any) {\r\n    return this.httpClient.post(this.url + '/user/signup', data, {\r\n      headers: new HttpHeaders().set('Content-Type', 'application/json'),\r\n    });\r\n  }\r\n\r\n  forgotPassword(data: any) {\r\n    return this.httpClient.post(this.url + '/user/forgotPassword/', data, {\r\n      headers: new HttpHeaders().set('Content-Type', 'application/json'),\r\n    });\r\n  }\r\n\r\n  login(data: any) {\r\n    return this.httpClient.post(this.url + '/user/login/', data, {\r\n      headers: new HttpHeaders().set('Content-Type', 'application/json'),\r\n    });\r\n  }\r\n\r\n  checkToken() {\r\n    return this.httpClient.get(this.url + '/user/checkToken');\r\n  }\r\n\r\n  changePassword(data: any) {\r\n    return this.httpClient.post(this.url + '/user/changePassword', data, {\r\n      headers: new HttpHeaders().set('Content-Type', 'application/json'),\r\n    });\r\n  }\r\n\r\n  getUsers() {\r\n    return this.httpClient.get(this.url + '/user/get/');\r\n  }\r\n\r\n  update(data: any) {\r\n    return this.httpClient.patch(this.url + '/user/update', data, {\r\n      headers: new HttpHeaders().set('Content-Type', 'application/json'),\r\n    });\r\n  }\r\n\r\n  updateContactNumber(data: any) {\r\n    return this.httpClient.patch(\r\n      this.url + '/user/updateContactNumber/',\r\n      data,\r\n      {\r\n        headers: new HttpHeaders().set('Content-Type', 'application/json'),\r\n      }\r\n    );\r\n  }\r\n\r\n  delete(id: any) {\r\n    return this.httpClient.delete(this.url + '/user/delete/' + id, {\r\n      headers: new HttpHeaders().set('Content-Type', 'application/json'),\r\n    });\r\n  }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { UserService } from '../services/user.service';\r\nimport { SnackbarService } from '../services/snackbar.service';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\nimport { GlobalConstants } from '../shared/global-constants';\r\nimport { NgxUiLoaderService } from 'ngx-ui-loader';\r\n\r\n@Component({\r\n  selector: 'app-signup',\r\n  templateUrl: './signup.component.html',\r\n  styleUrls: ['./signup.component.scss'],\r\n})\r\nexport class SignupComponent implements OnInit {\r\n  signupForm: any = FormGroup;\r\n  responseMessage: any;\r\n\r\n  constructor(\r\n    private formBuilder: FormBuilder,\r\n    private router: Router,\r\n    private userService: UserService,\r\n    private snackbarService: SnackbarService,\r\n    private dialogRef: MatDialogRef<SignupComponent>,\r\n    private ngxService: NgxUiLoaderService\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.signupForm = this.formBuilder.group({\r\n      name: [\r\n        null,\r\n        [Validators.required, Validators.pattern(GlobalConstants.nameRegex)],\r\n      ],\r\n      email: [\r\n        null,\r\n        [Validators.required, Validators.pattern(GlobalConstants.emailRegex)],\r\n      ],\r\n      contactNumber: [\r\n        null,\r\n        [\r\n          Validators.required,\r\n          Validators.pattern(GlobalConstants.contactNumberRegex),\r\n        ],\r\n      ],\r\n      password: [null, [Validators.required]],\r\n    });\r\n  }\r\n\r\n  handleSubmit() {\r\n    this.ngxService.start();\r\n    var formData = this.signupForm.value;\r\n    var data = {\r\n      name: formData.name,\r\n      email: formData.email,\r\n      contactNumber: formData.contactNumber,\r\n      password: formData.password,\r\n    };\r\n    this.userService.signup(data).subscribe(\r\n      (response: any) => {\r\n        this.ngxService.stop();\r\n        this.dialogRef.close();\r\n        this.responseMessage = response?.message;\r\n        this.snackbarService.openSnackBar(this.responseMessage, '');\r\n        this.router.navigate(['/']);\r\n      },\r\n      (error) => {\r\n        this.ngxService.stop();\r\n        if (error.error?.message) {\r\n          this.responseMessage = error.error?.message;\r\n        } else {\r\n          this.responseMessage = GlobalConstants.genericError;\r\n        }\r\n        this.snackbarService.openSnackBar(\r\n          this.responseMessage,\r\n          GlobalConstants.error\r\n        );\r\n      }\r\n    );\r\n  }\r\n}\r\n","<mat-toolbar color=\"primary\">\r\n    <mat-toolbar-row fxLayout=\"row\">\r\n        <span class=\"title-center\">Signup</span>\r\n    </mat-toolbar-row>\r\n</mat-toolbar>\r\n\r\n<mat-dialog-content class=\"mat-typography\">\r\n    <form [formGroup]=\"signupForm\">\r\n        <div fxFlex fxLayout=\"column\">\r\n            <mat-form-field appearance=\"fill\" fxFlex>\r\n                <mat-label>Name</mat-label>\r\n                <input matInput formControlName=\"name\" required>\r\n                <mat-error *ngIf=\"signupForm.controls.name.touched && signupForm.controls.name.invalid\">\r\n                    <span *ngIf=\"signupForm.controls.name.errors.required\">This field is mandatory.</span>\r\n                    <span *ngIf=\"signupForm.controls.name.errors.pattern\">This field is invalid.</span>\r\n                </mat-error>\r\n            </mat-form-field>\r\n\r\n            <mat-form-field appearance=\"fill\" fxFlex>\r\n                <mat-label>Email</mat-label>\r\n                <input matInput formControlName=\"email\" required>\r\n                <mat-error *ngIf=\"signupForm.controls.email.touched && signupForm.controls.email.invalid\">\r\n                    <span *ngIf=\"signupForm.controls.email.errors.required\">This field is mandatory.</span>\r\n                    <span *ngIf=\"signupForm.controls.email.errors.pattern\">This field is invalid.</span>\r\n                </mat-error>\r\n            </mat-form-field>\r\n\r\n            <mat-form-field appearance=\"fill\" fxFlex>\r\n                <mat-label>Contact Number</mat-label>\r\n                <input matInput formControlName=\"contactNumber\" required>\r\n                <mat-error\r\n                    *ngIf=\"signupForm.controls.contactNumber.touched && signupForm.controls.contactNumber.invalid\">\r\n                    <span *ngIf=\"signupForm.controls.contactNumber.errors.required\">This field is mandatory.</span>\r\n                    <span *ngIf=\"signupForm.controls.contactNumber.errors.pattern\">This field is invalid.</span>\r\n                </mat-error>\r\n            </mat-form-field>\r\n\r\n            <mat-form-field appearance=\"fill\" fxFlex>\r\n                <mat-label>Password</mat-label>\r\n                <input matInput formControlName=\"password\" type=\"password\" required>\r\n                <mat-error *ngIf=\"signupForm.controls.password.touched && signupForm.controls.password.invalid\">\r\n                    <span *ngIf=\"signupForm.controls.passwrd.errors.required\">This field is mandatory.</span>\r\n                    <span *ngIf=\"signupForm.controls.name.errors.pattern\">This field is invalid.</span>\r\n                </mat-error>\r\n            </mat-form-field>\r\n        </div>\r\n    </form>\r\n</mat-dialog-content>\r\n\r\n<mat-dialog-actions align=\"center\">\r\n    <button mat-raised-button color=\"primary\" type=\"submit\" (click)=\"handleSubmit()\"\r\n        [disabled]=\"!(signupForm.valid && signupForm.dirty)\">Signup</button>\r\n    <button mat-raised-button color=\"primary\" mat-dialog-close>Close</button>\r\n</mat-dialog-actions>","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { HomeComponent } from './home/home.component';\r\nimport { FullComponent } from './layouts/full/full.component';\r\nimport { RouteGuardService } from './services/route-guard.service';\r\n\r\nconst routes: Routes = [\r\n  { path: '', component: HomeComponent },\r\n  {\r\n    path: 'cafeteria',\r\n    component: FullComponent,\r\n    children: [\r\n      {\r\n        path: '',\r\n        redirectTo: '/cafeteria/dashboard',\r\n        pathMatch: 'full',\r\n      },\r\n      {\r\n        path: '',\r\n        loadChildren: () =>\r\n          import('./material-component/material.module').then(\r\n            (m) => m.MaterialComponentsModule\r\n          ),\r\n        canActivate: [RouteGuardService],\r\n        data: {\r\n          expectedRole: ['admin', 'user'],\r\n        },\r\n      },\r\n      {\r\n        path: 'dashboard',\r\n        loadChildren: () =>\r\n          import('./dashboard/dashboard.module').then((m) => m.DashboardModule),\r\n        canActivate: [RouteGuardService],\r\n        data: {\r\n          expectedRole: ['admin', 'user'],\r\n        },\r\n      },\r\n    ],\r\n  },\r\n  { path: '**', component: HomeComponent },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class AppRoutingModule {}\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { SnackbarService } from '../services/snackbar.service';\r\nimport { UserService } from '../services/user.service';\r\nimport { MatDialogRef } from '@angular/material/dialog';\r\nimport { GlobalConstants } from '../shared/global-constants';\r\nimport { NgxUiLoaderService } from 'ngx-ui-loader';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.scss'],\r\n})\r\nexport class LoginComponent implements OnInit {\r\n  loginForm: any = FormGroup;\r\n  responseMessage: any;\r\n\r\n  constructor(\r\n    private formBuilder: FormBuilder,\r\n    private router: Router,\r\n    private userService: UserService,\r\n    private snackbarService: SnackbarService,\r\n    private ngxService: NgxUiLoaderService,\r\n    private dialogRef: MatDialogRef<LoginComponent>\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.loginForm = this.formBuilder.group({\r\n      email: [\r\n        null,\r\n        [Validators.required, Validators.pattern(GlobalConstants.emailRegex)],\r\n      ],\r\n      password: [null, Validators.required],\r\n    });\r\n  }\r\n\r\n  handleSubmit() {\r\n    this.ngxService.start();\r\n    var formData = this.loginForm.value;\r\n    var data = {\r\n      email: formData.email,\r\n      password: formData.password,\r\n    };\r\n    this.userService.login(data).subscribe(\r\n      (response: any) => {\r\n        this.ngxService.stop();\r\n        this.dialogRef.close();\r\n        localStorage.setItem('token', response.token);\r\n        this.responseMessage = response?.message;\r\n        this.snackbarService.openSnackBar(this.responseMessage, '');\r\n        this.router.navigate(['/cafeteria/dashboard']);\r\n      },\r\n      (error) => {\r\n        this.ngxService.stop();\r\n        if (error.error?.message) {\r\n          this.responseMessage = error.error?.message;\r\n        } else {\r\n          this.responseMessage = GlobalConstants.genericError;\r\n        }\r\n        this.snackbarService.openSnackBar(\r\n          this.responseMessage,\r\n          GlobalConstants.error\r\n        );\r\n      }\r\n    );\r\n  }\r\n}\r\n","<mat-toolbar color=\"primary\">\r\n    <mat-toolbar-row fxLayout=\"row\">\r\n        <span class=\"title-center\">Login</span>\r\n    </mat-toolbar-row>\r\n</mat-toolbar>\r\n\r\n<mat-dialog-content class=\"mat-typography\">\r\n    <form [formGroup]=\"loginForm\">\r\n        <div fxFlex fxLayout=\"column\">\r\n            <mat-form-field appearance=\"fill\" fxFlex>\r\n                <mat-label>Email</mat-label>\r\n                <input matInput formControlName=\"email\" required>\r\n                <mat-error *ngIf=\"loginForm.controls.email.touched && loginForm.controls.email.invalid\">\r\n                    <span *ngIf=\"loginForm.controls.email.errors.required\">This field is mandatory.</span>\r\n                    <span *ngIf=\"loginForm.controls.email.errors.pattern\">This field is invalid.</span>\r\n                </mat-error>\r\n            </mat-form-field>\r\n\r\n            <mat-form-field appearance=\"fill\" fxFlex>\r\n                <mat-label>Password</mat-label>\r\n                <input matInput formControlName=\"password\" type=\"password\" required>\r\n                <mat-error *ngIf=\"loginForm.controls.password.touched && loginForm.controls.password.invalid\">\r\n                    <span *ngIf=\"loginForm.controls.password.errors.required\">This field is mandatory.</span>\r\n                    <span *ngIf=\"loginForm.controls.password.errors.pattern\">This field is invalid.</span>\r\n                </mat-error>\r\n            </mat-form-field>\r\n        </div>\r\n    </form>\r\n</mat-dialog-content>\r\n\r\n<mat-dialog-actions align=\"center\">\r\n    <button mat-raised-button color=\"primary\" type=\"submit\" (click)=\"handleSubmit()\"\r\n        [disabled]=\"!(loginForm.valid && loginForm.dirty)\">Login</button>\r\n    <button mat-raised-button color=\"primary\" mat-dialog-close>Close</button>\r\n</mat-dialog-actions>","import { Component } from '@angular/core';\r\nimport { MatDialog, MatDialogConfig } from '@angular/material/dialog';\r\nimport { Router } from '@angular/router';\r\nimport { ChangePasswordComponent } from 'src/app/material-component/dialog/change-password/change-password.component';\r\nimport { ConfirmationComponent } from 'src/app/material-component/dialog/confirmation/confirmation.component';\r\n\r\n@Component({\r\n  selector: 'app-header',\r\n  templateUrl: './header.component.html',\r\n  styleUrls: [],\r\n})\r\nexport class AppHeaderComponent {\r\n  role: any;\r\n  constructor(private router: Router, private dialog: MatDialog) {}\r\n\r\n  logout() {\r\n    const dialogConfig = new MatDialogConfig();\r\n    dialogConfig.data = {\r\n      message: 'logout',\r\n    };\r\n    const dialogRef = this.dialog.open(ConfirmationComponent, dialogConfig);\r\n    const sub = dialogRef.componentInstance.onEmitStatusChange.subscribe(\r\n      (user) => {\r\n        dialogRef.close();\r\n        localStorage.clear();\r\n        this.router.navigate(['/']);\r\n      }\r\n    );\r\n  }\r\n\r\n  changePassword() {\r\n    const dialogConfig = new MatDialogConfig();\r\n    dialogConfig.width = '550px';\r\n    this.dialog.open(ChangePasswordComponent, dialogConfig);\r\n  }\r\n}\r\n","<button [matMenuTriggerFor]=\"profile\" mat-icon-button class=\"m-r-5\">\r\n    <mat-icon>account_circle</mat-icon>\r\n</button>\r\n<mat-menu #profile=\"matMenu\" class=\"mymegamenu\">\r\n    <button mat-menu-item (click)=\"changePassword()\">\r\n        <mat-icon>password</mat-icon>Change Password\r\n    </button>\r\n\r\n    <button mat-menu-item (click)=\"logout()\">\r\n        <mat-icon>exit_to_app</mat-icon>Sign Out\r\n    </button>\r\n\r\n</mat-menu>","import { Directive, HostListener, Inject } from '@angular/core';\r\n\r\nimport { AccordionLinkDirective } from './accordionlink.directive';\r\n\r\n@Directive({\r\n  selector: '[appAccordionToggle]'\r\n})\r\nexport class AccordionAnchorDirective {\r\n  protected navlink: AccordionLinkDirective;\r\n\r\n  constructor(@Inject(AccordionLinkDirective) navlink: AccordionLinkDirective) {\r\n    this.navlink = navlink;\r\n  }\r\n\r\n  @HostListener('click', ['$event'])\r\n  onClick(e: any) {\r\n    this.navlink.toggle();\r\n  }\r\n}\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";","import { Injectable } from '@angular/core';\r\nimport {\r\n  HttpRequest,\r\n  HttpHandler,\r\n  HttpEvent,\r\n  HttpInterceptor,\r\n  HttpErrorResponse,\r\n} from '@angular/common/http';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\nimport { LowerCasePipe } from '@angular/common';\r\nimport { Router } from '@angular/router';\r\n\r\n@Injectable()\r\nexport class TokenInterceptorInterceptor implements HttpInterceptor {\r\n  constructor(private router: Router) {}\r\n\r\n  intercept(\r\n    request: HttpRequest<unknown>,\r\n    next: HttpHandler\r\n  ): Observable<HttpEvent<unknown>> {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      request = request.clone({\r\n        setHeaders: { Authorization: `Bearer ${token}` },\r\n      });\r\n    }\r\n    return next.handle(request).pipe(\r\n      catchError((err) => {\r\n        if (err instanceof HttpErrorResponse) {\r\n          console.log(err.url);\r\n          if (err.status === 401 || err.status === 403) {\r\n            if (this.router.url === '/') {\r\n            } else {\r\n              localStorage.clear();\r\n              this.router.navigate(['/']);\r\n            }\r\n          }\r\n        }\r\n        return throwError(err);\r\n      })\r\n    );\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///"}